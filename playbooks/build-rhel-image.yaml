---
- name: Build RHEL Image
  hosts: imagebuilder
  become: true
  vars_files:
  - vars/image-definition.yaml
  vars:
    iso_bucket_name: "iso"
    retries: 100
    delay: 60
  tasks:
  - name: Import secrets
    ansible.builtin.include_vars:
      file: "./vars/secrets.yml"
  - name: Create a temp file for imagebuilder blueprint
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: builder_blueprint
  - name: Set the blueprint file in fact
    ansible.builtin.set_fact:
      workstation_blueprint: "{{ builder_blueprint.path }}"
  - name: Create the blueprint
    infra.osbuild.create_blueprint:
      dest: "{{ workstation_blueprint }}"
      name: "{{ builder_blueprint_name }}"
      description: "{{ builder_blueprint_description }}"
      distro: "{{ builder_blueprint_distro | default(omit) }}"
      packages: "{{ builder_compose_pkgs | default(omit) }}"
      customizations: "{{ builder_compose_customizations | default(omit) }}"
  - name: Push the blueprint to osbuild
    infra.osbuild.push_blueprint:
      src: "{{ workstation_blueprint }}"
  - name: Check whether components listed in blueprint and dependencies are valid
    ansible.builtin.shell: |
      composer-cli --json blueprints depsolve {{ builder_blueprint_name }} | jq -r ".[].body.errors | length"
    register: depsolve_result
  - name: debug
    ansible.builtin.debug:
      msg: "Depsolve errors: {{ depsolve_result.stdout }}"
  - name: fail when errors
    assert:
      that: 
      - depsolve_result.stdout != 0
      fail_msg: "Depsolve errors in blueprint" 
  - name: Start composing image 
    ansible.builtin.shell: |
      composer-cli --json compose start {{ builder_blueprint_name }} {{ builder_compose_type }} | jq -r ".[].body.build_id"
    register: start_compose_result
  - name: Set job id
    ansible.builtin.set_fact:
      job_id: "{{ start_compose_result.stdout }}"
  - name: Wait for compose to finish
    ansible.builtin.shell: |
      composer-cli --json compose info {{ job_id }} | jq -r ".[].body.queue_status"
    until: check_status_result.stdout not in ["RUNNING", "WAITING"]
    retries: "{{ retries }}"
    delay: "{{ delay }}"
    register: check_status_result
  - name: Check job succeeded
    ansible.builtin.assert:
      that: 
      - check_status_result != "FINISHED"
      fail_msg: "Compose job failed. Check compose logs"
  - name: Get/Set blueprint version
    block:
    - name: Get blueprint version from osbuild
      ansible.builtin.shell: |
        composer-cli --json blueprints show "{{ builder_blueprint_name }}" | jq -r ".[].body.blueprints[].version"
      register: blueprint_show_result
    - name: Check a version was retrieved
      assert:
        that:
        - blueprint_show_result != ""
        fail_msg: "Blueprint version was not retrieved"
    - name: Set blueprint version
      ansible.builtin.set_fact:
        blueprint_version: "{{ blueprint_show_result.stdout }}"
  - name: Download artifact
    block:
    - name: Create temp dir
      ansible.builtin.tempfile:
        state: directory
        suffix: "artifacts"
      register: tempdir_result
    - name: Set artifact dir
      set_fact:
        artifact_dir: "{{ tempdir_result.path }}"
    - name: Set extension
      block:
      - name: When image-installer
        when: builder_compose_type == "image-installer"
        ansible.builtin.set_fact:
          artifact_ext: "iso"
    - name: Set full artifact file in fact
      ansible.builtin.set_fact:
        artifact_file: "{{ artifact_dir }}/{{ builder_blueprint_name }}_{{ blueprint_version }}.{{ artifact_ext }}"
    - name: Download artifact
      ansible.builtin.shell: |
        composer-cli compose image {{ job_id }} --filename {{ artifact_file }}
  - name: Upload ISOs to S3 bucket
    block:
    - name: Uploading ImageBuilder generated ISO 
      ansible.builtin.shell: |
        aws s3 cp "{{ artifact_file }}" "s3://{{ iso_bucket_name }}/{{ artifact_file | basename }}"
    - name: Uploading ISO with custom kickstart
      ansible.builtin.shell: |
        aws s3 cp "{{ iso_with_custom_ks }}" "s3://{{ iso_bucket_name }}/{{ iso_with_custom_ks | basename }}"
